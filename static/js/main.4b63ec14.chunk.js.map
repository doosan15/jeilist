{"version":3,"sources":["Subject.js","App.js","serviceWorker.js","index.js"],"names":["Subject","name","image","desc","code","member","stock","className","src","alt","App","class","subjectlist","map","subject","key","id","subject_name","grade_code","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"msDAaeA,MAXf,YAA2D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,MAC/C,OACE,yBAAKC,UAAU,WACb,yBAAKC,IAAKN,EAAOO,IAAKN,IACtB,wBAAII,UAAU,gBAAgBN,GAC9B,yBAAKM,UAAU,kBAAkBH,EAAjC,yBAA6C,2BAAIC,GAAjD,oBAAmE,2BAAIC,GAAvE,O,MCmDOI,MArDf,WACE,OACE,6BAASH,UAAY,aAEnB,yBAAKA,UAAU,UACb,yBAAKA,UAAU,WACf,yBAAKC,IAAI,kBAAkBC,IAAI,UAEjC,yBAAKF,UAAU,cACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,gBACb,yBAAKI,MAAM,QACT,yBAAKA,MAAM,aAAY,gFACvB,yBAAKA,MAAM,aAAX,qDACA,yBAAKA,MAAM,aAAX,iFAEF,yBAAKH,IAAI,yBAAyBC,IAAI,kBAM5C,yBAAKF,UAAY,YAAjB,IAA6B,0EAA7B,qGAEA,yBAAKA,UAAY,YACdK,EAAYC,KAAI,SAAAC,GAAO,OACtB,kBAAC,EAAD,CACEC,IAAOD,EAAQE,GACff,KAAQa,EAAQG,aAChBf,MAASY,EAAQZ,MACjBE,KAAQU,EAAQI,WAChBb,OAAUS,EAAQT,OAClBC,MAASQ,EAAQR,MACjBH,KAAQW,EAAQG,mBAOtB,yBAAKN,MAAM,UACP,yBAAKA,MAAM,WACT,yBAAKH,IAAI,oBAAoB,yBAAKG,MAAM,eACtC,2BAAG,wEAAH,gIACA,2BAAG,8EAAgC,yDAAnC,sCACA,wFCtCMQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4b63ec14.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Subject({name, image, desc, code, member, stock}){\n    return(\n      <div className='subject'>\n        <img src={image} alt={desc} />\n        <h4 className='subject_name'>{name}</h4>\n        <div className='subject_member'>{code} | 회원수 <b>{member}</b> | 재고  <b>{stock}</b> </div>\n      </div>\n    )\n  }\n\n\nexport default Subject;\n","import React from 'react';\nimport subjectlist from './subjectlist';\nimport Subject from './Subject';\nimport './App.css';\n\nfunction App(){\n  return(\n    <section className = 'container'>\n      {/* header */}\n      <div className='header'>\n        <div className='helper' />\n        <img src='images/logo.gif' alt='logo' />\n      </div>\n      <div className='mainbanner'>\n        <div className='bannerWidth'>\n          <div className='bannerCenter'>\n            <div class='info'>\n              <div class=\"info_text\"><b>\" 진짜 사고력 학습 \"</b></div> \n              <div class=\"info_text\">학년이 올라갈수록</div>\n              <div class=\"info_text\">힘이 생기는 진짜 사고력 학습</div>\n            </div>\n            <img src='images/index_img20.png' alt='mainBanner' />\n          </div>\n        </div>\n      </div>\n           \n      {/* subject list */}\n      <div className = 'subtitle'> <b>재능스스로 과목</b> \n      내 아이 처음 공부, 선택이 중요합니다.</div>\n      <div className = 'subjects'>\n        {subjectlist.map(subject => (\n          <Subject \n            key = {subject.id}\n            name = {subject.subject_name}\n            image = {subject.image}\n            code = {subject.grade_code}\n            member = {subject.member}\n            stock = {subject.stock}\n            desc = {subject.subject_name}\n          />\n        ))\n      } \n      </div> \n      \n      {/* footer */ }\n      <div class='footer'>\n          <div class='footer_'>\n            <img src='images/logo.gif' /><div class='footer_info'>\n              <p><span>대표자: 박종우</span>주소: 서울특별시 종로구 창경궁로 293(주)재능교육</p>\n              <p><span>사업자번호: 204-81-03990</span><span>전화: 1588-1132</span>이메일: answer@jei.com</p>\n              <p>Copyright © JEI corporation. All rights reserved.</p>\n            </div>\n          </div>\n      </div>\n    </section>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}